{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListreducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/CartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducer';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderPayReducerByCash, orderPayReducerByGpay, orderListMyReducer, orderListReducer, orderDeliverReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListreducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderPayByCash: orderPayReducerByCash,\n  orderPayByGpay: orderPayReducerByGpay,\n  orderMyList: orderListMyReducer,\n  orderList: orderListReducer,\n  orderDeliver: orderDeliverReducer\n});\nconst cartItemFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst paymentMethodFromStorage = localStorage.getItem('paymentMethod') ? JSON.parse(localStorage.getItem('paymentMethod')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n    paymentMethod: paymentMethodFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/sagar/Desktop/extras/new Proshop git cloned/Proshop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListreducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderPayReducerByCash","orderPayReducerByGpay","orderListMyReducer","orderListReducer","orderDeliverReducer","reducer","productList","productDetails","productDelete","productCreate","productUpdate","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","userUpdate","orderCreate","orderDetails","orderPay","orderPayByCash","orderPayByGpay","orderMyList","orderList","orderDeliver","cartItemFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","paymentMethodFromStorage","initialState","cartItems","shippingAddress","paymentMethod","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,kBADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,oBALF,QAMO,4BANP;AAOA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,wBAJF,EAKEC,eALF,EAMEC,iBANF,EAOEC,iBAPF,QAQO,wBARP;AASA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,qBAJF,EAKEC,qBALF,EAMEC,kBANF,EAOEC,gBAPF,EAQEC,mBARF,QASO,0BATP;AAWA,MAAMC,OAAO,GAAGzB,eAAe,CAAC;AAC9B0B,EAAAA,WAAW,EAAEtB,kBADiB;AAE9BuB,EAAAA,cAAc,EAAEtB,qBAFc;AAG9BuB,EAAAA,aAAa,EAACtB,oBAHgB;AAI9BuB,EAAAA,aAAa,EAACtB,oBAJgB;AAK9BuB,EAAAA,aAAa,EAACtB,oBALgB;AAM9BuB,EAAAA,IAAI,EAAEtB,WANwB;AAO9BuB,EAAAA,SAAS,EAAEtB,gBAPmB;AAQ9BuB,EAAAA,YAAY,EAAEtB,mBARgB;AAS9BuB,EAAAA,WAAW,EAAEtB,kBATiB;AAU9BuB,EAAAA,iBAAiB,EAAEtB,wBAVW;AAW9BuB,EAAAA,QAAQ,EAAEtB,eAXoB;AAY9BuB,EAAAA,UAAU,EAAEtB,iBAZkB;AAa9BuB,EAAAA,UAAU,EAACtB,iBAbmB;AAc9BuB,EAAAA,WAAW,EAAEtB,kBAdiB;AAe9BuB,EAAAA,YAAY,EAAEtB,mBAfgB;AAgB9BuB,EAAAA,QAAQ,EAAEtB,eAhBoB;AAiB9BuB,EAAAA,cAAc,EAAEtB,qBAjBc;AAkB9BuB,EAAAA,cAAc,EAAEtB,qBAlBc;AAmB9BuB,EAAAA,WAAW,EAAEtB,kBAnBiB;AAoB9BuB,EAAAA,SAAS,EAACtB,gBApBoB;AAqB9BuB,EAAAA,YAAY,EAACtB;AArBiB,CAAD,CAA/B;AAuBA,MAAMuB,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADwB,GAExB,EAFJ;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GAExB,IAFJ;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC/BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAD+B,GAE/B,EAFJ;AAIA,MAAMK,wBAAwB,GAAGN,YAAY,CAACC,OAAb,CAAqB,eAArB,IAC7BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAD6B,GAE7B,EAFJ;AAIA,MAAMM,YAAY,GAAG;AACnBxB,EAAAA,IAAI,EAAE;AACJyB,IAAAA,SAAS,EAAET,mBADP;AAEJU,IAAAA,eAAe,EAAEJ,0BAFb;AAGJK,IAAAA,aAAa,EAAEJ;AAHX,GADa;AAMnBtB,EAAAA,SAAS,EAAE;AAAE2B,IAAAA,QAAQ,EAAEP;AAAZ;AANQ,CAArB;AASA,MAAMQ,UAAU,GAAG,CAAC1D,KAAD,CAAnB;AAEA,MAAM2D,KAAK,GAAG9D,WAAW,CACvB0B,OADuB,EAEvB8B,YAFuB,EAGvBpD,mBAAmB,CAACF,eAAe,CAAC,GAAG2D,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {\r\n  productListreducer,\r\n  productDetailsReducer,\r\n  productDeleteReducer,\r\n  productCreateReducer,\r\n  productUpdateReducer,\r\n} from './reducers/productReducers'\r\nimport { cartReducer } from './reducers/CartReducers'\r\nimport {\r\n  userLoginReducer,\r\n  userRegisterReducer,\r\n  userDetailsReducer,\r\n  userUpdateProfileReducer,\r\n  userListReducer,\r\n  userDeleteReducer,\r\n  userUpdateReducer\r\n} from './reducers/userReducer'\r\nimport {\r\n  orderCreateReducer,\r\n  orderDetailsReducer,\r\n  orderPayReducer,\r\n  orderPayReducerByCash,\r\n  orderPayReducerByGpay,\r\n  orderListMyReducer,\r\n  orderListReducer,\r\n  orderDeliverReducer\r\n} from './reducers/orderReducers'\r\n\r\nconst reducer = combineReducers({\r\n  productList: productListreducer,\r\n  productDetails: productDetailsReducer,\r\n  productDelete:productDeleteReducer,\r\n  productCreate:productCreateReducer,\r\n  productUpdate:productUpdateReducer,\r\n  cart: cartReducer,\r\n  userLogin: userLoginReducer,\r\n  userRegister: userRegisterReducer,\r\n  userDetails: userDetailsReducer,\r\n  userUpdateProfile: userUpdateProfileReducer,\r\n  userList: userListReducer,\r\n  userDelete: userDeleteReducer,\r\n  userUpdate:userUpdateReducer,\r\n  orderCreate: orderCreateReducer,\r\n  orderDetails: orderDetailsReducer,\r\n  orderPay: orderPayReducer,\r\n  orderPayByCash: orderPayReducerByCash,\r\n  orderPayByGpay: orderPayReducerByGpay,\r\n  orderMyList: orderListMyReducer,\r\n  orderList:orderListReducer,\r\n  orderDeliver:orderDeliverReducer\r\n})\r\nconst cartItemFromStorage = localStorage.getItem('cartItems')\r\n  ? JSON.parse(localStorage.getItem('cartItems'))\r\n  : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo'))\r\n  : null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n  ? JSON.parse(localStorage.getItem('shippingAddress'))\r\n  : {}\r\n\r\nconst paymentMethodFromStorage = localStorage.getItem('paymentMethod')\r\n  ? JSON.parse(localStorage.getItem('paymentMethod'))\r\n  : {}\r\n\r\nconst initialState = {\r\n  cart: {\r\n    cartItems: cartItemFromStorage,\r\n    shippingAddress: shippingAddressFromStorage,\r\n    paymentMethod: paymentMethodFromStorage,\r\n  },\r\n  userLogin: { userInfo: userInfoFromStorage },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store\r\n"]},"metadata":{},"sourceType":"module"}