{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sagar\\\\Desktop\\\\extras\\\\new Proshop git cloned\\\\Proshop\\\\frontend\\\\src\\\\Screens\\\\userEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport FormComponent from '../components/formComponent';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getUserDetails, updateUser } from '../actions/userAction';\nimport { USER_UPDATE_RESET } from '../contants/userConstant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = _ref => {\n  _s();\n\n  let {\n    location,\n    match,\n    history\n  } = _ref;\n  const userId = match.params.id; //   console.log(userId)\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setisAdmin] = useState(false);\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    success: successUpdate,\n    error: errorUpdate\n  } = userUpdate; //   console.log(user._Id)\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      history.push('/admin/userlist');\n    } else if (!user.name || user._id !== userId) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setisAdmin(user.isAdmin);\n    }\n  }, [user, dispatch, successUpdate, history, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault(); // console.log('submit Handler')\n\n    let pattern = /^[A-z\\s]+$/;\n    let sampleEmail = /^[A-z0-9]+.@[A-z]+.[A-z]+$/; //Dispatch Register\n\n    if (!pattern.test(name)) {\n      setMessage('name length should be more then 5 characters and only alphabets');\n    } else if (!sampleEmail.test(email)) {\n      setMessage('please enter correct email ID');\n    } else {\n      // dispatch(userUpdate(name, email))\n      dispatch(updateUser({\n        _id: userId,\n        name,\n        email,\n        isAdmin\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-dark my-3 py-2\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormComponent, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center \",\n        children: \"Edit User Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 27\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : message ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          className: \"py-2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Set your name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          className: \"py-2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Set your Mail\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isAdmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin?\",\n            checked: isAdmin,\n            onChange: e => setisAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"dark\",\n          className: \"py-2 my-3\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserEditScreen, \"T6Hs3u6dB2yZqbdUhfOcqLhlEn4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["C:/Users/sagar/Desktop/extras/new Proshop git cloned/Proshop/frontend/src/Screens/userEditScreen.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Link","Form","Button","FormComponent","Message","Loader","getUserDetails","updateUser","USER_UPDATE_RESET","UserEditScreen","location","match","history","userId","params","id","name","setName","email","setEmail","isAdmin","setisAdmin","message","setMessage","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","success","successUpdate","errorUpdate","type","push","_id","submitHandler","e","preventDefault","pattern","sampleEmail","test","target","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,uBAA3C;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;;AAEA,MAAMC,cAAc,GAAG,QAAkC;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAiC;AACvD,QAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,CAAaC,EAA5B,CADuD,CAEvD;;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM2B,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM0B,WAAW,GAAG3B,WAAW,CAAE4B,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BJ,WAAjC;AAEA,QAAMK,UAAU,GAAGhC,WAAW,CAAE4B,KAAD,IAAWA,KAAK,CAACI,UAAlB,CAA9B;AACA,QAAM;AACJH,IAAAA,OAAO,EAAEI,aADL;AAEJC,IAAAA,OAAO,EAAEC,aAFL;AAGJL,IAAAA,KAAK,EAAEM;AAHH,MAIFJ,UAJJ,CAduD,CAmBvD;;AAEAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqC,aAAJ,EAAmB;AACjBT,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE3B;AAAR,OAAD,CAAR;AACAI,MAAAA,OAAO,CAACwB,IAAR,CAAa,iBAAb;AACD,KAHD,MAGO,IAAI,CAACP,IAAI,CAACb,IAAN,IAAca,IAAI,CAACQ,GAAL,KAAaxB,MAA/B,EAAuC;AAC5CW,MAAAA,QAAQ,CAAClB,cAAc,CAACO,MAAD,CAAf,CAAR;AACD,KAFM,MAEA;AACLI,MAAAA,OAAO,CAACY,IAAI,CAACb,IAAN,CAAP;AACAG,MAAAA,QAAQ,CAACU,IAAI,CAACX,KAAN,CAAR;AACAG,MAAAA,UAAU,CAACQ,IAAI,CAACT,OAAN,CAAV;AACD;AACF,GAXQ,EAWN,CAACS,IAAD,EAAOL,QAAP,EAAiBS,aAAjB,EAAgCrB,OAAhC,EAAyCC,MAAzC,CAXM,CAAT;;AAaA,QAAMyB,aAAa,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF,GAD2B,CAE3B;;AACA,QAAIC,OAAO,GAAG,YAAd;AACA,QAAIC,WAAW,GAAG,4BAAlB,CAJ2B,CAK3B;;AACA,QAAI,CAACD,OAAO,CAACE,IAAR,CAAa3B,IAAb,CAAL,EAAyB;AACvBO,MAAAA,UAAU,CACR,iEADQ,CAAV;AAGD,KAJD,MAIO,IAAI,CAACmB,WAAW,CAACC,IAAZ,CAAiBzB,KAAjB,CAAL,EAA8B;AACnCK,MAAAA,UAAU,CAAC,+BAAD,CAAV;AACD,KAFM,MAEA;AACL;AACAC,MAAAA,QAAQ,CAACjB,UAAU,CAAC;AAAE8B,QAAAA,GAAG,EAAExB,MAAP;AAAeG,QAAAA,IAAf;AAAqBE,QAAAA,KAArB;AAA4BE,QAAAA;AAA5B,OAAD,CAAX,CAAR;AACD;AACF,GAhBD;;AAkBA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,iBAAT;AAA2B,MAAA,SAAS,EAAC,wBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,aAAD;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGW,aAAa,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFpB,EAGGG,WAAW,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAHlB,EAIGP,OAAO,gBACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADM,GAEJC,KAAK,gBACP,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cADO,GAELN,OAAO,gBACT,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cADS,gBAGT,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEgB,aAAhB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAA6B,UAAA,SAAS,EAAC,MAAvC;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,eAFd;AAGE,YAAA,KAAK,EAAEtB,IAHT;AAIE,YAAA,QAAQ,EAAGuB,CAAD,IAAOtB,OAAO,CAACsB,CAAC,CAACK,MAAF,CAASC,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAA8B,UAAA,SAAS,EAAC,MAAxC;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,WAAW,EAAC,eAFd;AAGE,YAAA,KAAK,EAAE3B,KAHT;AAIE,YAAA,QAAQ,EAAGqB,CAAD,IAAOpB,QAAQ,CAACoB,CAAC,CAACK,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,eAqBE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,SAAtB;AAAA,iCAWE,QAAC,IAAD,CAAM,KAAN;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,KAAK,EAAC,WAFR;AAGE,YAAA,OAAO,EAAEzB,OAHX;AAIE,YAAA,QAAQ,EAAGmB,CAAD,IAAOlB,UAAU,CAACkB,CAAC,CAACK,MAAF,CAASE,OAAV;AAJ7B;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA,gBArBF,eAwCE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,MAA9B;AAAqC,UAAA,SAAS,EAAC,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxCF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgED,CApHD;;GAAMrC,c;UASaV,W,EACGD,W,EAGDA,W;;;KAbfW,c;AAqHN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport FormComponent from '../components/formComponent'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUser } from '../actions/userAction'\r\nimport { USER_UPDATE_RESET } from '../contants/userConstant'\r\n\r\nconst UserEditScreen = ({ location, match, history }) => {\r\n  const userId = match.params.id\r\n  //   console.log(userId)\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setisAdmin] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    success: successUpdate,\r\n    error: errorUpdate,\r\n  } = userUpdate\r\n  //   console.log(user._Id)\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else if (!user.name || user._id !== userId) {\r\n      dispatch(getUserDetails(userId))\r\n    } else {\r\n      setName(user.name)\r\n      setEmail(user.email)\r\n      setisAdmin(user.isAdmin)\r\n    }\r\n  }, [user, dispatch, successUpdate, history, userId])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    // console.log('submit Handler')\r\n    let pattern = /^[A-z\\s]+$/\r\n    let sampleEmail = /^[A-z0-9]+.@[A-z]+.[A-z]+$/\r\n    //Dispatch Register\r\n    if (!pattern.test(name)) {\r\n      setMessage(\r\n        'name length should be more then 5 characters and only alphabets'\r\n      )\r\n    } else if (!sampleEmail.test(email)) {\r\n      setMessage('please enter correct email ID')\r\n    } else {\r\n      // dispatch(userUpdate(name, email))\r\n      dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Link to='/admin/userlist' className='btn btn-dark my-3 py-2'>\r\n        Go Back\r\n      </Link>\r\n      <FormComponent>\r\n        <h1 className='text-center '>Edit User Details</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n        ) : message ? (\r\n          <Message variant='danger'>{message}</Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name' className='py-2'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Set your name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email' className='py-2'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Set your Mail'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='isAdmin'>\r\n              {/* <Form.Check\r\n                type='checkbox'\r\n                label='is Admin?'\r\n                id='isAdmin'\r\n                name='isAdmin'\r\n                value={isAdmin}\r\n                onChange={() =>\r\n                  isAdmin === false ? setisAdmin(true) : setisAdmin(false)\r\n                }\r\n              ></Form.Check> */}\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin?'\r\n                checked={isAdmin}\r\n                onChange={(e) => setisAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            {/* {console.log(isAdmin)} */}\r\n            <Button type='submit' variant='dark' className='py-2 my-3'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormComponent>\r\n    </div>\r\n  )\r\n}\r\nexport default UserEditScreen\r\n"]},"metadata":{},"sourceType":"module"}